{"version":3,"sources":["../src/bin.js"],"names":["toLower","Rusha","CryptoJSlib","CryptoJS","inflate","random","eGCD_","greater","divide_","str2bigInt","equalsInt","isZero","bigInt2str","copy_","copyInt_","rightShift_","leftShift_","sub_","add_","powMod","bpe","one","rushaInstance","generateNonce","nonce","Array","i","nextRandomInt","bytesToString","bytes","ln","length","temp","String","fromCharCode","result","join","stringToChars","str","charCodeAt","strDecToHex","bytesToHex","arr","push","toString","bytesFromHex","hexString","len","start","parseInt","charAt","substr","bytesCmp","bytes1","bytes2","bytesXor","bytesToWords","ArrayBuffer","Uint8Array","words","lib","WordArray","init","bytesFromWords","wordArray","sigBytes","bytesFromLeemonBigInt","bigInt","bytesToArrayBuffer","b","buffer","convertToArrayBuffer","undefined","byteLength","BYTES_PER_ELEMENT","convertToUint8Array","convertToByteArray","isArray","newBytes","bytesFromArrayBuffer","byteView","from","bufferConcat","buffer1","buffer2","l1","l2","tmp","set","dividerLem","longToInts","sLong","lemNum","div","rem","resL","longToBytes","reverse","lshift32","high","low","highNum","nLow","res","rshift32","num","intToUint","val","middle","uintToInt","sha1HashSync","hashBytes","rawDigest","sha1BytesSync","sha256HashSync","hashWords","SHA256","rsaEncrypt","publicKey","addPadding","N","modulus","E","exponent","X","encryptedBigInt","encryptedBytes","blockSize","zeroes","needPadding","padding","concat","aesEncryptSync","keyBytes","ivBytes","encryptedWords","AES","encrypt","iv","pad","NoPadding","mode","IGE","ciphertext","aesDecryptSync","decryptedWords","decrypt","gzipUncompress","maxValue","Math","floor","pqPrimeFactorization","pqBytes","minSize","ceil","hex","lWhat","pqPrimeLeemon","what","minBits","minLen","it","q","lim","a","c","g","z","x","y","j","P","Q","bytesModPow","m","xBigInt","yBigInt","mBigInt","resBigInt"],"mappings":"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","file":"bin.js","sourcesContent":["import toLower from 'ramda/src/toLower'\nimport Rusha from 'rusha'\nimport * as CryptoJSlib from '@goodmind/node-cryptojs-aes'\nconst { CryptoJS } = CryptoJSlib\nimport { inflate } from 'pako/lib/inflate'\n\nimport random from './service/secure-random'\n\n\nimport { eGCD_, greater, divide_, str2bigInt, equalsInt,\n  isZero, bigInt2str, copy_, copyInt_, rightShift_,\n  leftShift_, sub_, add_, powMod, bpe, one } from './vendor/leemon'\n\n\nconst rushaInstance = new Rusha(1024 * 1024)\n\n\nexport function generateNonce() {\n  const nonce = new Array(16)\n  for (let i = 0; i < 16; i++)\n    nonce[i] = nextRandomInt(0xFF)\n  return nonce\n}\n\n\nexport function bytesToString(bytes: Uint8Array) {\n  const ln = bytes.length\n  const temp = new Array(ln)\n  for (let i = 0; i < ln; ++i)\n    temp[i] = String.fromCharCode(bytes[i])\n  const result = temp.join('')\n  return result\n}\n\nexport function stringToChars(str: string) {\n  const ln = str.length\n  const result: number[] = Array(ln)\n  for (let i = 0; i < ln; ++i)\n    result[i] = str.charCodeAt(i)\n  return result\n}\n\nexport const strDecToHex = str => toLower(\n  bigInt2str(\n    str2bigInt(str, 10, 0), 16\n  ))\n\nexport function bytesToHex(bytes = []) {\n  const arr = []\n  for (let i = 0; i < bytes.length; i++) {\n    arr.push((bytes[i] < 16 ? '0' : '') + (bytes[i] || 0).toString(16))\n  }\n  return arr.join('')\n}\n\nexport function bytesFromHex(hexString: string) {\n  const len = hexString.length\n  let start = 0\n  const bytes = []\n\n  if (hexString.length % 2) {\n    bytes.push(parseInt(hexString.charAt(0), 16))\n    start++\n  }\n\n  for (let i = start; i < len; i += 2) {\n    bytes.push(parseInt(hexString.substr(i, 2), 16))\n  }\n\n  return bytes\n}\n\nexport function bytesCmp(bytes1: number[] | Uint8Array,\n                         bytes2: number[] | Uint8Array) {\n  const len = bytes1.length\n  if (len !== bytes2.length) {\n    return false\n  }\n\n  for (let i = 0; i < len; i++) {\n    if (bytes1[i] !== bytes2[i])\n      return false\n  }\n  return true\n}\n\nexport function bytesXor(bytes1, bytes2) {\n  const len = bytes1.length\n  const bytes = []\n\n  for (let i = 0; i < len; ++i) {\n    bytes[i] = bytes1[i] ^ bytes2[i]\n  }\n\n  return bytes\n}\n\nexport function bytesToWords(bytes) {\n  if (bytes instanceof ArrayBuffer) {\n    bytes = new Uint8Array(bytes)\n  }\n  const len = bytes.length\n  const words = []\n  let i\n  for (i = 0; i < len; i++) {\n    words[i >>> 2] |= bytes[i] << 24 - i % 4 * 8\n  }\n\n  return new CryptoJS.lib.WordArray.init(words, len)\n}\n\nexport function bytesFromWords(wordArray) {\n  const words = wordArray.words\n  const sigBytes = wordArray.sigBytes\n  const bytes = []\n\n  for (let i = 0; i < sigBytes; i++) {\n    bytes.push(words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)\n  }\n\n  return bytes\n}\n\n\nexport function bytesFromLeemonBigInt(bigInt) {\n  const str = bigInt2str(bigInt, 16)\n  return bytesFromHex(str)\n}\n\nexport function bytesToArrayBuffer(b) {\n  return (new Uint8Array(b)).buffer\n}\n\nexport function convertToArrayBuffer(bytes) {\n  // Be careful with converting subarrays!!\n  if (bytes instanceof ArrayBuffer) {\n    return bytes\n  }\n  if (bytes.buffer !== undefined &&\n    bytes.buffer.byteLength == bytes.length * bytes.BYTES_PER_ELEMENT) {\n    return bytes.buffer\n  }\n  return bytesToArrayBuffer(bytes)\n}\n\nexport function convertToUint8Array(bytes) {\n  if (bytes.buffer !== undefined)\n    return bytes\n  return new Uint8Array(bytes)\n}\n\nexport function convertToByteArray(bytes) {\n  if (Array.isArray(bytes))\n    return bytes\n  bytes = convertToUint8Array(bytes)\n  const newBytes = []\n  for (let i = 0, len = bytes.length; i < len; i++)\n    newBytes.push(bytes[i])\n  return newBytes\n}\n\nexport function bytesFromArrayBuffer(buffer) {\n  const byteView = new Uint8Array(buffer)\n  const bytes = Array.from( byteView )\n  return bytes\n}\n\nexport function bufferConcat(buffer1, buffer2) {\n  const l1 = buffer1.byteLength || buffer1.length\n  const l2 = buffer2.byteLength || buffer2.length\n  const tmp = new Uint8Array(l1 + l2)\n  tmp.set(\n    buffer1 instanceof ArrayBuffer\n      ? new Uint8Array(buffer1)\n      : buffer1,\n    0)\n  tmp.set(\n    buffer2 instanceof ArrayBuffer\n      ? new Uint8Array(buffer2)\n      : buffer2,\n    l1)\n\n  return tmp.buffer\n}\n\n// const dividerBig = bigint(0x100000000)\nconst dividerLem = str2bigInt('100000000', 16, 4)\n\n// const printTimers = (timeL, timeB, a, b, n) => setTimeout(\n//   () => console.log(`Timer L ${timeL} B ${timeB}`, ...a, ...b, n || ''),\n//   100)\n\nexport function longToInts(sLong: string) {\n  const lemNum = str2bigInt(sLong, 10, 6)\n  const div = new Array(lemNum.length)\n  const rem = new Array(lemNum.length)\n  divide_(lemNum, dividerLem, div, rem)\n  const resL = [\n    ~~bigInt2str(div, 10),\n    ~~bigInt2str(rem, 10)\n  ]\n  return resL\n}\n\nexport function longToBytes(sLong) {\n  return bytesFromWords({ words: longToInts(sLong), sigBytes: 8 }).reverse()\n}\n\nexport function lshift32(high: number, low: number) {\n  const highNum = str2bigInt(high.toString(), 10, 6)\n  const nLow = str2bigInt(low.toString(), 10, 6)\n  leftShift_(highNum, 32)\n\n  add_(highNum, nLow)\n  const res = bigInt2str(highNum, 10)\n  return res\n}\n\nexport const rshift32 = (str: string) => {\n  const num = str2bigInt(str, 10, 6)\n  rightShift_(num, 32)\n  return bigInt2str(num, 10)\n}\n\nexport function intToUint(val: string) {\n  let result = ~~val\n  if (result < 0)\n    result = result + 0x100000000\n  return result\n}\n\nconst middle = 0x100000000 / 2 - 1\n\nexport function uintToInt(val: number): number {\n  if (val > middle)\n    val = val - 0x100000000\n  return val\n}\n\nexport function sha1HashSync(bytes) {\n  // console.log(dT(), 'SHA-1 hash start', bytes.byteLength || bytes.length)\n  const hashBytes = rushaInstance.rawDigest(bytes).buffer\n  // console.log(dT(), 'SHA-1 hash finish')\n\n  return hashBytes\n}\n\nexport function sha1BytesSync(bytes) {\n  return bytesFromArrayBuffer(sha1HashSync(bytes))\n}\n\nexport function sha256HashSync(bytes) {\n  // console.log(dT(), 'SHA-2 hash start', bytes.byteLength || bytes.length)\n  const hashWords = CryptoJS.SHA256(bytesToWords(bytes))\n  // console.log(dT(), 'SHA-2 hash finish')\n\n  const hashBytes = bytesFromWords(hashWords)\n\n  return hashBytes\n}\n\nexport function rsaEncrypt(publicKey, bytes) {\n  bytes = addPadding(bytes, 255)\n\n  const N = str2bigInt(publicKey.modulus, 16, 256)\n  const E = str2bigInt(publicKey.exponent, 16, 256)\n  const X = str2bigInt(bytesToHex(bytes), 16, 256)\n  const encryptedBigInt = powMod(X, E, N),\n        encryptedBytes = bytesFromHex(bigInt2str(encryptedBigInt, 16))\n\n  return encryptedBytes\n}\n\nexport function addPadding(bytes: ArrayBuffer | Uint8Array | number[],\n                           blockSize: number = 16,\n                           zeroes: boolean) {\n\n  const len = bytes.byteLength || bytes.length\n  const needPadding = blockSize - len % blockSize\n  if (needPadding > 0 && needPadding < blockSize) {\n    const padding = new Array(needPadding)\n    if (zeroes) {\n      for (let i = 0; i < needPadding; i++)\n        padding[i] = 0\n    } else\n      random(padding)\n\n    bytes = bytes instanceof ArrayBuffer\n      ? bufferConcat(bytes, padding)\n      : bytes.concat(padding)\n  }\n\n  return bytes\n}\n\nexport function aesEncryptSync(bytes, keyBytes, ivBytes) {\n  // console.log(dT(), 'AES encrypt start', len/*, bytesToHex(keyBytes), bytesToHex(ivBytes)*/)\n  bytes = addPadding(bytes)\n\n  const encryptedWords = CryptoJS.AES.encrypt(bytesToWords(bytes), bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  }).ciphertext\n\n  const encryptedBytes = bytesFromWords(encryptedWords)\n  // console.log(dT(), 'AES encrypt finish')\n\n  return encryptedBytes\n}\n\nexport function aesDecryptSync(encryptedBytes, keyBytes, ivBytes) {\n\n  // console.log(dT(), 'AES decrypt start', encryptedBytes.length)\n  const decryptedWords = CryptoJS.AES.decrypt({ ciphertext: bytesToWords(encryptedBytes) }, bytesToWords(keyBytes), {\n    iv     : bytesToWords(ivBytes),\n    padding: CryptoJS.pad.NoPadding,\n    mode   : CryptoJS.mode.IGE\n  })\n\n  const bytes = bytesFromWords(decryptedWords)\n  // console.log(dT(), 'AES decrypt finish')\n\n  return bytes\n}\n\nexport function gzipUncompress(bytes) {\n  // console.log('Gzip uncompress start')\n  const result = inflate(bytes)\n  // console.log('Gzip uncompress finish')\n  return result\n}\n\nexport function nextRandomInt(maxValue: number) {\n  return Math.floor(Math.random() * maxValue)\n}\n\n\nexport function pqPrimeFactorization(pqBytes) {\n  const minSize = Math.ceil(64 / bpe) + 1\n\n  // const what = new BigInteger(pqBytes)\n  const hex = bytesToHex(pqBytes)\n  const lWhat = str2bigInt(hex, 16, minSize)\n  const result = pqPrimeLeemon(lWhat)\n  return result\n}\n\n\nexport function pqPrimeLeemon(what) {\n  const minBits = 64\n  const minLen = Math.ceil(minBits / bpe) + 1\n  let it = 0\n  let q, lim\n  const a = new Array(minLen)\n  const b = new Array(minLen)\n  const c = new Array(minLen)\n  const g = new Array(minLen)\n  const z = new Array(minLen)\n  const x = new Array(minLen)\n  const y = new Array(minLen)\n\n  for (let i = 0; i < 3; i++) {\n    q = (nextRandomInt(128) & 15) + 17\n    copyInt_(x, nextRandomInt(1000000000) + 1)\n    copy_(y, x)\n    lim = 1 << i + 18\n\n    for (let j = 1; j < lim; j++) {\n      ++it\n      copy_(a, x)\n      copy_(b, x)\n      copyInt_(c, q)\n\n      while (!isZero(b)) {\n        if (b[0] & 1) {\n          add_(c, a)\n          if (greater(c, what)) {\n            sub_(c, what)\n          }\n        }\n        add_(a, a)\n        if (greater(a, what)) {\n          sub_(a, what)\n        }\n        rightShift_(b, 1)\n      }\n\n      copy_(x, c)\n      if (greater(x, y)) {\n        copy_(z, x)\n        sub_(z, y)\n      } else {\n        copy_(z, y)\n        sub_(z, x)\n      }\n      eGCD_(z, what, g, a, b)\n      if (!equalsInt(g, 1)) {\n        break\n      }\n      if ((j & j - 1) === 0) {\n        copy_(y, x)\n      }\n    }\n    if (greater(g, one)) {\n      break\n    }\n  }\n\n  divide_(what, g, x, y)\n\n  const [P, Q] =\n    greater(g, x)\n      ? [x, g]\n      : [g, x]\n\n  // console.log(dT(), 'done', bigInt2str(what, 10), bigInt2str(P, 10), bigInt2str(Q, 10))\n\n  return [bytesFromLeemonBigInt(P), bytesFromLeemonBigInt(Q), it]\n}\n\nexport function bytesModPow(x, y, m) {\n  const xBigInt = str2bigInt(bytesToHex(x), 16)\n  const yBigInt = str2bigInt(bytesToHex(y), 16)\n  const mBigInt = str2bigInt(bytesToHex(m), 16)\n  const resBigInt = powMod(xBigInt, yBigInt, mBigInt)\n\n  return bytesFromHex(bigInt2str(resBigInt, 16))\n}\n\n"]}